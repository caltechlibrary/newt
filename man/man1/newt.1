.\" Automatically generated by Pandoc 3.0
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "newt" "1" "" "user manual" "Version 0.0.1 f4a1558"
.hy
.SH NAME
.PP
newt
.SH SYNOPSIS
.PP
newt [CONFIG_FILE]
.SH DESCRIPTION
.PP
\f[I]newt\f[R] is a microservice designed to work along side Postgres,
PostgREST, and Pandoc server.
It provides URL routing and data flow between the microservices based on
a list of \[lq]routes\[rq] described in a CSV file.
newt is part of the Newt Project which is exploring building web
services, applications and sites using SQL for data modeling and define
back-end service behaviors along with Pandoc templates used to generate
HTML consumed by the web browser.
newt supports data hosted in Postgres databases via PostgREST JSON API
as well as static files contained in an \[lq]htdocs\[rq] directory
(e.g.\ HTML, CSS, JavaScript, and image assets).
.PP
This goal of Newt Project is to be able to assemble an entire backend
from off the self services only requiring data modeling and end point
definitions using SQL and a Postgres database.
Reducing the back-end to SQL may simplify application management (it
reduces it to a database administrator activity) and free up developer
time to focus more on front end development and human interaction.
It is also hoped that focusing the back-end on a declaritive model will
allow for a more consistent and reliable back-end.
.SH OPTIONS
.TP
-help
display help
.TP
-license
display license
.TP
-version
display version
.TP
-dry-run
Load configuration and routes CSV but don\[cq]t start web service
.SH CONFIGURATION
.PP
The three things newt needs to know to run are port number, where to
find the \[lq]routes\[rq] CSV file and a list of any POSIX environment
variables to import and make available inside the router.
.PP
{app_mame} can be configured via a POSIX environment.
.IP
.nf
\f[C]
NEWT_PORT=\[dq]8000\[dq]
NEWT_ROUTES=\[dq]routes.csv\[dq]
NEWT_ENV=\[dq]DB_NAME;DB_USER;DB_PASSWORD\[dq]
export NEWT_PORT
export NEWT_ROUTES
export NEWT_ENV
\f[R]
.fi
.PP
It can also be configured using a configuration file.
.IP
.nf
\f[C]
newt_port = \[dq]8000\[dq]
newt_routes = \[dq]routes.csv\[dq]
newt_env = [ \[dq]DB_NAME\[dq], \[dq]DB_USER\[dq], \[dq]DB_PASSWORD\[dq] ]
\f[R]
.fi
.PP
The environment will load first then the configuration file if provided.
The configuration file takes presidence to the environment.
.PP
newt does not have secrets but could use secrets passed in via the
environment.
This allows your routes CSV file to be safely saved along side your SQL
source code for your Newt Project.
.SH EXAMPLES
.PP
Configuration from the environment
.IP
.nf
\f[C]
    export NEWT_PORT=\[dq]3030\[dq]
    export NEWT_ROUTES=\[dq]routes.csv\[dq]
    export NEWT_ENV=\[dq]DB_USER;DB_PASSWORD\[dq]
    newt
\f[R]
.fi
.PP
Configuration from a YAML file called \[lq]newt.yaml\[rq]
.IP
.nf
\f[C]
newt newt.yaml
\f[R]
.fi
.SH AUTHORS
R. S. Doiel.
