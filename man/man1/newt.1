.\" Automatically generated by Pandoc 3.0
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "newt" "1" "" "user manual" "Version 0.0.1 f75250d"
.hy
.SH NAME
.PP
newt
.SH SYNOPSIS
.PP
newt [CONFIG_FILE]
.SH DESCRIPTION
.PP
\f[I]newt\f[R] is a microservice designed to work along side Postgres,
PostgREST, and Pandoc server.
It provides URL routing and data flow between the microservices based on
a list of \[lq]routes\[rq] described in a CSV file.
newt is part of the Newt Project which is exploring building web
services, applications and sites using SQL for data modeling and define
back-end service behaviors along with Pandoc templates used to generate
HTML consumed by the web browser.
newt supports data hosted in Postgres databases via PostgREST JSON API
as well as static files contained in an \[lq]htdocs\[rq] directory
(e.g.\ HTML, CSS, JavaScript, and image assets).
.PP
This goal of Newt Project is to be able to assemble an entire back-end
from off the self services only requiring data modeling and end point
definitions using SQL and a Postgres database.
Reducing the back-end to SQL may simplify application management (it
reduces it to a database administrator activity) and free up developer
time to focus more on front end development and human interaction.
It is also hoped that focusing the back-end on a declarative model will
allow for a more consistent and reliable back-end.
.SH OPTIONS
.TP
-help
display help
.TP
-license
display license
.TP
-version
display version
.TP
-dry-run
Load configuration and routes CSV but don\[cq]t start web service
.SH CONFIGURATION
.PP
The three things newt needs to know to run are port number, where to
find the \[lq]routes\[rq] CSV file and a list of any POSIX environment
variables to import and make available inside the router.
.PP
newt can be configured via a POSIX environment.
.IP
.nf
\f[C]
NEWT_PORT=\[dq]8000\[dq]
NEWT_ROUTES=\[dq]routes.csv\[dq]
NEWT_ENV=\[dq]DB_NAME;DB_USER;DB_PASSWORD\[dq]
export NEWT_PORT
export NEWT_ROUTES
export NEWT_ENV
\f[R]
.fi
.PP
It can also be configured using a configuration file.
.IP
.nf
\f[C]
newt_port = \[dq]8000\[dq]
newt_routes = \[dq]routes.csv\[dq]
newt_env = [ \[dq]DB_NAME\[dq], \[dq]DB_USER\[dq], \[dq]DB_PASSWORD\[dq] ]
\f[R]
.fi
.PP
The environment will load first then the configuration file if provided.
The configuration file takes precedence to the environment.
.PP
newt does not have secrets but could use secrets passed in via the
environment.
This allows your routes CSV file to be safely saved along side your SQL
source code for your Newt Project.
.SH Routing data
.PP
For newt to function as a data router is needs information about which
requests will be serviced and how to map them to a JSON data API source
before (optionally) sending to Pandoc.
.PP
The routes are held in CSV file with the following columns
.TP
req_path
This is the URL path to watch for incoming requests, it may be a literal
path or one containing variable declarations used in forming a API URL
call.
.TP
req_method
This is the HTTP method to listen for.
Maybe \[lq]GET\[rq], \[lq]POST\[rq], \[lq]PUT\[rq], \[lq]PATCH\[rq] or
\[lq]DELETE\[rq]
.TP
api_url
This is the URL used to connect to the JSON data source
(e.g.\ PostgREST, Solr, Elasticsearch).
It may contain variables defined in the request path.
.TP
api_method
This is the HTTP method used to access the JSON data source.
Maybe \[lq]OPTIONS\[rq], \[lq]GET\[rq], \[lq]POST\[rq], \[lq]PUT\[rq],
\[lq]PATCH\[rq] or \[lq]DELETE\[rq]
.TP
api_content_type
This is the HTTP content type string to send with your JSON data source
request, typically it is \[lq]application/json\[rq].
.TP
pandoc_template
If included Newt will load the Pandoc template file into memory and use
it when results are returned from a JSON data source.
.TP
res_headers
This is any additional HTTP headers you want to send back to the client.
.SH Route DSL
.PP
A simple domain specific language (DSL) can be used to define values
taken from a request path and used again to form a JSON data API URL.
Variables can be defined in each of the request path\[cq]s directory
name(s), file basename and file extension.
The variable is defined by an opening double curly bracket, the variable
name, a space, a type and closing double curly brackets.
.IP
.nf
\f[C]
/blog/${yr Year}/${mo Month}/${dy Day}/${title-slug String}
/blog/${yr Year}/${mo Month}/${dy Day}/${title-slug Basename}${ext Extname}
\f[R]
.fi
.PP
In the first line the variables defined are \[lq]yr\[rq] of type
\[lq]Year\[rq], \[lq]mo\[rq] of type \[lq]Month\[rq], \[lq]dy\[rq] of
type \[lq]Day\[rq], \[lq]title-slug\[rq] of type \[lq]String\[rq].
In the second line the \[lq]title-slug\[rq] is of type
\[lq]Basename\[rq] (i.e.\ filename without an extension) and
\[lq]ext\[rq] is of type \[lq]Extname\[rq] (i.e.\ the file extension).
.PP
In this prototype phase there are a very limited number of variables
types supported.
This is likely to grow overtime if the prototype is successful.
.SS variable types
.TP
String
Any sequence of characters except \[lq]/\[rq] which delimits the
directory parts
.TP
Year
A four digit year (e.g.\ 2023)
.TP
Month
A two digit month (e.g.\ \[lq]01\[rq] for January, \[lq]10\[rq] for
October)
.TP
Day
A two digit day (e.g.\ \[lq]01\[rq] for the first, \[lq]11\[rq] for the
eleventh)
.TP
Basename
A file\[cq]s basename (filename without an extension)
.TP
Extname
A file\[cq]s extension (e.g.\ \[lq].html\[rq], \[lq].txt\[rq],
\[lq].rss\[rq], \[lq].js\[rq])
.TP
Isbn10
An ten digit ISBN
.TP
Isbn13
A thirteen digit ISBN
.TP
Isbn
An ISBN (either 10 ro 13 digit)
.TP
Issn
An ISSN
.TP
DOI
A DOI (digital object identifier)
.TP
Isni
An ISNI
.TP
ORCID
An ORCID identifier
.SH EXAMPLES
.PP
Configuration from the environment
.IP
.nf
\f[C]
    export NEWT_PORT=\[dq]3030\[dq]
    export NEWT_ROUTES=\[dq]routes.csv\[dq]
    export NEWT_ENV=\[dq]DB_USER;DB_PASSWORD\[dq]
    newt
\f[R]
.fi
.PP
Configuration from a YAML file called \[lq]newt.yaml\[rq]
.IP
.nf
\f[C]
newt newt.yaml
\f[R]
.fi
.PP
An example of a CSV file describing blog display routes.
.IP
.nf
\f[C]
req_path,req_method,api_url,api_method,api_content_type,pandoc_template,res_headers
/blog/${yr Year}/${mo Month}//${dy Day},GET,http://localhost:3000/posts?year=${yr}&month=${mo}&day=${dy},posts.tmpl,\[dq]{\[dq]\[dq]content-type\[dq]\[dq]: \[dq]\[dq]text/html\[dq]\[dq]}\[dq]
/blog/${yr Year}/${mo Month}//${dy Day}/${title-slug},GET,http://localhost:3000/posts?year=${yr}&month=${mo}&day=${dy}&title-slug=${title-slug},article.tmpl,\[dq]{\[dq]\[dq]content-type\[dq]\[dq]: \[dq]\[dq]text/html\[dq]\[dq]}\[dq]
\f[R]
.fi
.SH AUTHORS
R. S. Doiel.
