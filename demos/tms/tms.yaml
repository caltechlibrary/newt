#
# This is the Newt Project description for the Thesis Management System.
# It will run in a single table modeling the current state of the Thesis workflow.
#
# Postgres PL/Python will be used to trigger emails when status change
# An external process will query the model table and then make adjustments in the
# RDM review queie or published record, (assuming RDM v12 or later).
#
applications:
  router:
    port: 8010
    htdocs: htdocs
  mustache:
    port: 8011
  postgrest:
    namespace: tms
    app_path: postgrest
    conf_path: postgrest.conf
    port: 3000
  enviroment:
    - DB_USER
    - DB_PASSWORD
models:
  - id: tms
    description: This is where you would model your application data
    body:
      - id: author
        type: input
        attributes:
          description: Name of the student submitting the thesis/disertation
          label: (required) Enter the thesis/disertation author's name
          name: author
          placeholdertext: ex. Doiel, Robert S.
        validations:
          required: true
      - id: title
        type: input
        attributes:
          description: This should be the title of the thesis or disertation
          label: (required) Title
          placeholdertext: ex. Automatic application generation from library, archives and museums
        validations:
          required: true
      - id: abstract
        type: textarea
        attributes:
          description: The thesis or disertation abstract
          label: (required) Abstract
          placeholdertext: ex. The Abstract from thesis or disertation goes here
        validations:
          required: true
      - id: division
        type: input
        attributes:
          description: This is the division that is approving the thesis or disertation
          label: (required) Division
          placeholdertext: ex. Humanities and Social Sciences
        validations:
          required: true
      - id: major_option
        type: input
        attributes:
          description: This is the major option of the graduating student
          label: (required) Major
          placeholdertext: ex. History of Applied Computation and Algorithms
        validations:
          required: true
      - id: minor_option
        type: input 
        attributes:
          description: This is the minor option, if chosen, of the graduating student
          label: (optional) Minor
          placeholdertext: ex. Technological Impacts on Society
        validations:
          required: false
      - id: submission_date
        type: input[type=date]
        attributes:
          description: Date thesis was submitted
          label: (required) submission date
          placeholdertext: 2025-05-01
        validations:
          required: true
      - id: status
        type: input
        attributes:
          description: Workflow Status
          label: (required) status
          placeholdertext: submitted
        validations:
          required: true
      - id: final_flag
        type: input[type=checkbox]
        attributes:
          description: Indicate the thesis deposit is finallized
          label: (optional) Is this thesis ready for release?
      - id: status_history
        type: textarea
        attributes:
          description: A list status values and date set
          label: (generated) Status History
          readonly: true
        validations:
          trigger: status_change
      - id: comments
        type: textarea
        attributes:
          description: Internal processing notes
          label: (optional) Internal Notes
      - id: comment_history
        type: textarea
        attributes:
          description: Generated comment history
          label: (generative) comment history
        validations:
          trigger: comment_entry
      - id: repository_id
        type: input
        attributes: 
          description: the repository record id for the submitted thesis
          label: (generative) record id
        validations:
          required: true
routes:
  - id: tms_list
    request: GET /tms
    pipeline:
      - service: GET http://localhost:3000/rpc/tms_list
        description: Example of tms_list service for tms
      - service: POST http://localhost:8011/tms_list
        description: Example of tms_list service for tms
  - id: tms_create
    request: POST /tms
    pipeline:
      - service: POST http://localhost:3000/rpc/tms_create
        description: Example of tms_create service for tms
      - service: POST http://localhost:8011/tms_create
        description: Example of tms_create service for tms
  - id: tms_read
    request: GET /tms_read/{oid}
    pipeline:
      - service: GET http://localhost:3000/rpc/tms_read
        description: Example of tms_read service for tms
      - service: POST http://localhost:8011/tms_read
        description: Example of tms_read service for tms
  - id: tms_update
    request: PUT /tms_update/{oid}
    pipeline:
      - service: PUT http://localhost:3000/rpc/tms_update
        description: Example of tms_update service for tms
      - service: POST http://localhost:8011/tms_update
        description: Example of tms_update service for tms
  - id: tms_delete
    request: DELETE /tms_delete/{oid}
    pipeline:
      - service: DELETE http://localhost:3000/rpc/tms_delete
        description: Example of tms_delete service for tms
      - service: POST http://localhost:8011/tms_delete
        description: Example of tms_delete service for tms
  - id: tms_create_form
    request: GET /tms/{$}
    description: Example display a create web form
    pipeline:
      - service: POST http://localhost:8011/tms_create_form
        description: Example of tms_create_form service for tms
  - id: tms_update_form
    request: GET /tms/{oid}
    description: Example display a update web form
    pipeline:
      - service: POST http://localhost:8011/tms_update_form
        description: Example of tms_update_form service for tms
  - id: tms_delete_form
    request: GET /tms/{oid}
    description: Example display a delete web form
    pipeline:
      - service: POST http://localhost:8011/tms_delete_form
        description: Example of tms_delete_form service for tms
templates:
  - request: /tms_create_form
    template: tms_create_form.tmpl
    description: Example display an create web from
  - request: /tms_update_form
    template: tms_update_form.tmpl
    description: Example display an update web from
  - request: /tms_delete_form
    template: tms_delete_form.tmpl
    description: Example display a delete web from
  - request: /tms_create
    template: tms_create.tmpl
    description: This is an example of defining a template handler
  - request: /tms_read
    template: tms_read.tmpl
    description: This is an example of defining a template handler
  - request: /tms_update
    template: tms_update.tmpl
    description: This is an example of defining a template handler
  - request: /tms_delete
    template: tms_delete.tmpl
    description: This is an example of defining a template handler
  - request: /tms_list
    template: tms_list.tmpl
    description: This is an example of defining a template handler
