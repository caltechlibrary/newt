
# Newt, a router and page assembler microservice

An idea occurred to me about PostgreSQL and PostgREST. It is missing feature the ability to render a web page. It lacks access to a template engine. Pandoc Server seems ripe for this. What is needed is a microservice that takes a requested URL, fetches the data and template from PostgREST hands it to Pandoc server before returning the assembled page to the requestor (e.g. web browser or front end web server).

The question is one of routing. Which request is sent to PostgREST and which template is used to send to Pandoc server. This reduces the problem to a function of routing. Where is the mapping defined and managed? I think the route handler could defined in PostgreSQL via a PL. The URL Path, HTTP Method and any payload is sent to PostgREST triggering the route handler. The route handler function processes the routing hand back the HTTP status code, message, headers and any Obecjts and Pandoc template name. The is then bounced to Pandoc server before handling the results back to the requestor.


- What is the essence of a route?
- Where and when are routes defined?
- How do we deal with file uploads?
- How do we reduce the size of the page assembler pipe line?

~~~
Web Browser (GET) -> page assembler -> PostgREST (PL GET router function ) -> page assembler \
    -+ (no error) -> Pandoc Server -> page assembler -> Web browser
     |
     + (error, permissions issue) http status code for error/page -> Web Browser
~~~

## Refining the ideas

Routing can be thought of as a table. It contains a tupple of prefix filter, HTTP Method, mapping to a microservice URL, the microservice's HTTP Method, optional Pandoc template file name/source. The route table could be define via a simple SQL table or CSV file loaded into PostgreSQL router table.

~~~csv
request_presidence, request_expresion, request_method, request_content_types, micro_service_url_template, micro_service_method, micro_service_content_type, optional_pandoc_template
~~~

request_presidence
: determine the order of evaluation of a routes, integer

request_expression
: url dsl expression used to select route and parse path info fields for processing by micro_service_url_template

request_method
: HTTP Method, e.g. GET, POST, PUT, PATCH, DELETE, HEAD

request_content_types
: an array of HTTP content types accepted for this route

micro_service_url_template
: the template, a url dsl, used to call the next microservice

micro_service_method
: the HTTP Method used to call the next microservice 

micro_service_content_type
: the HTTP content type used to call next microservice 

optional_pandoc_template
: filename to Pandoc template if response needs to be processed through Pandoc 




When newt starts up it reads the table of routes and loads a Pandoc templates for page assember.

Pandoc server needs to be available of the templates are to be used.

Should Pandoc be embedded in newt?

If most traffic is going to the pandoc server then Pandoc could be integrated into newt. That would save a network call and response. It would make newt the page assembler and not just a simple router. The url dsl could be Pandoc's template language.


## route parser

Can be simple if the order of evaluation is set in the router table use the presidence number. Each defined route is evaluted, on successful match the micro server vice is called passing along the fields and values expressed and any query parameters passed through to the microservice. If a Pandoc template is indicated it is processed before returning to the requestor.



Here is an example of some paths expressing the embedded parameters (using JavaScript string formatting as dsl).

~~~
/rest/eprint/${eprintid}.xml
/?q=${query_string}
/${eprintid}
/people/${personid}
/people/${personid}/
/people/${personid}/index.html
/people/${personid}/${aggregation_type}.html
/people/${personid}/${aggregation_type}.include
/people/${personid}/${aggregation_type}.json
/people/${personid}/recent/${aggregation_type}.html
~~~


## emplied route presidence

If we sort by the number of path parts (ignoring query parameters) from highest to lowest route filters can be mapped successfull.

Taking the list above that sort out as follows


~~~csv
no. parts, prefix filter  
3,/rest/eprint/${eprintid}.xml
1,/?q=${query_string}
1,/${eprintid}
2,/people/${personid}
3,/people/${personid}/
3,/people/${personid}/index.html
3,/people/${personid}/${aggregation_type}.html
3,/people/${personid}/${aggregation_type}.include
3,/people/${personid}/${aggregation_type}.json
4,/people/${personid}/recent/${aggregation_type}.html
~~~

The four part url path test is applied first and the 1 part path is last. If path parts are the same length they are sorted by alphabetical by the last element of the path for literals or filter parameter if not.

Sortinge by part count can be done onload but the question of matching a route path requires identify the elements of the path part. This can be done by turning the embeded parameter names into a list of ordered parameters and using a simple regexp replacement to determine if match occurs. The ordered parameters then can be extracted as well if the regexp match returns the ordered list of elements. If a provided path does not match then the next path of similar length os tried.

- parse path into an array of parts
   - for each prefix with same number parts
     - if routes matches
        - handle route and return result 
   - return 404

Literals take president over variables when testing for match. Non-literal interior path parts are matched next, terminating path part matches on basename and or extention indepently present following literal having presidence over var value.

newt and page_assembler
:  a microservice (middleware) that accepts a URL, parses its path and queries PostgREST for object(s) and template, sends  to pandoc server returning result to requestor; routes to other designated microservice and hands back result; returns a 404

Route handler is defined in a route table, should it support a pipeline of microservices?


