#
# cold.yaml defines the controlled object list and datum application
# from the perspective of Newt, a data route and form validator that
# relies on Postgres+PostgREST and template server for completing the 
# a web service trio that forms cold.
# 
# @author: R. S. Doiel <rsdoiel@caltech.edu>
#
application:
  port: 8011
  citation: CITATION.cff
  environemnt:
    - DB_USER
    - DB_PASSWORD
    - DB_HOST
models:
  - id: cl_person
    name: Caltech Person
    description: This models a Caltech Person
    body:
      - id: cl_people_id
        description: cl_people_id is an internal Caltech Library id
        type: input
        validation:
          primary_key: true
          required: true
      - id: family_name: String
        description: This is the person's family name. If they only have one name then it goes here.
        type: input
        validation:
          required: true
      - id: given_name
        description: This is a persons given name, it is optional
        type: input
      - id: orcid
        description: A person's ORCID if known
        type: input
        validation:
          regexp: [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]
      - id: author_id
        description: This is a legacy id from the days of CaltechAUTHORS running on Eprints
        type: input
      - id: directory_id
        description: This is the "userid" as listed in the Caltech directory metadata
        type: input[type=email]
      - id: relationships
        description: This is a set of statuses establishing their relationship in Caltech People
        type: checkboxes
        label: Check the checkboxes that apply to the person
        options:
          - label: Caltech
          - label: Alumni
          - label: Facutly
          - label: Researcher
          - label: Postdoc
          - label: Include in Feeds
      - id: direcotry_person_type
        description: The person type harvested from the Caltech Directory
        type: input
      - id: division
        description: The Caltech Division the person is affaliated with
        type: dropdown
        label: Pick the division the person is currently affiliated
        multiple: true
        options:
          - Biology and Biological Engineering
          - Chemestry and Chemical Engineering
          - Engineering and Applied Science
          - Geological and Planetary Sciences
          - Humanities and Social Sciences
          - Physics, Mathematics and Astronomy
       - id: updated
         description: Date profile was updated
         type: input[type=date]
         validations:
# NOTE: timestamps happen server side via SQL automation, they don't appear in web forms but can appear to display templates
           timestamp:
             - create
             - update
       - id: ror
         description: A ROR for Caltech or Caltech Group
         type: input
         validation:
           udutils: ROR
  - id: cl_group
    description: Models a Caltech Group, Organization or Lab
    name: Caltech Group
    body:
      - id: cl_group_id
        description: An internal Caltech Library group identifier
        type: input
        validations:
          required: true
      - id: name
        description: This group's name. Avoid ampersands.
        type: input
        validations:
          required: true
      - id: alternatives
        description: A list of alternative names, one per line
        type: textarea
      - id: email
        description: A public email address for group
        type: input[type=email]
      - id: website
        description: Group's public website
        type: input[type=url]
      - id: description
        description: The description of the group or organization
        type: textarea
      - id: start
        description: Approximate start date, e.g. YYYY, YYYY/MM, YYYY/MM/DD, circa ...
        type: input
        placeholder: ex. 1924, 2023-03, 2023-03-10, circa 2001
# approx_starts indicates if the "start" is an approximate (true) or exact (false)
      - id: approx_start
        type: checkboxes
        options:
          - label: Approximate Date
      - id: end
        description: Approximate end date, e.g. YYYY, YYYY/MM, YYYY/MM/DD, cira ...
        type: input
        placeholder: ex. 1924, 2023-03, 2023-03-10, circa 2001
      - id: approx_end
        type: checkboxes
        options:
          - label: Approximage Date
      - id: active
        description: Active statatus
        type: checkboxes
        options:
         - label: Check if active
      - id: doi_prefix
        description: DOI prefix used by group
        type: input
        validations:
          idutils: doi
      - id: grid
        description: Grid ID for group (Deminensions API)
        type: input
        validatoins:
          idutils: grid
      - id: isni
        description: ISNI (Name identifier)
        type: input
        validations:
          idutils: isni
      - id: ringold
        dscription: Ringold Identifier
        type: input
        validations:
          idutils: ringold
      - id: viaf
        description: VIAF identifier
        validations:
          idutils: viaf
      - id: ROR
        description: ROR identifier used by group
        type: input
        validations:
          idutils: ror
       - id: added
         description: Date group was added to COLD
         type: input[type=date]
         valdations:
# NOTE: timestamps happen server side via SQL automation, they don't appear in web forms but can appear to display templates
           timestamp:
             - created
       - id: updated
         description: Date group profile was updated
         type: input[type=date]
         validations:
# NOTE: timestamps happen server side via SQL automation, they don't appear in web forms but can appear to display templates
           timestamp:
             - create
             - update
#
# Controlled vocabulary models, these are mostly key/value pairs
#
  - id: cl_vocabulary
    description: This models controlled vocabulary items
    body:
      - id: voc_id
        description: The identifier for the vocabularyfile
        type: input
      - id: namespace
        description: An identifier for the namespace assocaited with voc_id
        type: input
      - id: key
        description: A vocabulary items key
        type: input
      - id: value
        description: A vocabulary items value
      - id: description
        description: A vocabulary item description
        input: textarea

#
#FIXME: Convert these routes into Newt 2nd Prototype YAML syntax
#

#
# cold routes, static content routes are noted only in comments. Dynamic
# ones are notated for orchestration by Newt
routes:
# Root path provides a description of PostgREST information (static asset path)
#- request_path: /
# Returns the version number of the service (static asset path
#- request_path: /cold/version
#
# /cold/people returns a list of all cl people ID
# 
- request_path: /cold/people
  request_method: GET
  api_method: GET
# cl_people_ids is implemented as a SQL view of cl_person model
  api_url: http://localhost:3000/cl_people_ids
# 
# cold people {cl_people_id} returns a single person record
#
- var:
    cl_people_id: String
  request_path: /cold/people/${cl_people_id}
  request_method: GET
  api_method: GET
# person_object is implemented as a SQL function of cl_person model
  api_url: http://localhost:3000/rpc/person_object?cl_people_id=${cl_people_id}
#
# /cold/group returns a list of all cl_group_ids
#
- request_path: /cold/group
  request_method: GET
  api_method: GET
  api_url: http://localhost:3000/cl_group_ids
#
# /cold/group/${cl_group_id}
# For a GET returns a group object, a PUT will create the group object, POST will replace the group object and DELETE will remove the group object
- var:
    cl_group_id: String
  request_path: /cold/group/${cl_group_id}
  request_method: GET
  api_method: GET
# group_object is imlpemented as an SQL function of the cl_group model
  api_url: http://localhost:3000/rpc/group_object?cl_group_id=${cl_group_id}
#
# Crosswalks
#
#
# A cross walk lets you put in a collection name (e.g. people, group), 
# a field name and a value and it returns a list of matching records.
#
# /cold/crosswalk/people/${identifier_name}/${identifier_value}
# Returns a list of "cl_people_id" assocated with that identifier
- var: 
    identifier_name: String
    identifier_value: String
  request_path: /cold/crosswalk/people/${identifier_name}/${identifier_value}
  request_method: GET
  api_content_method: GET
# people_crosswalk is implemented as an SQL function operating on the cl_person model
  api_url: http://localhost:3000/rpc/people_crosswalk?identifier=${identifier_name}&value=${identifier_value}
#
# /cold/crosswalk/group/${identifier_name}/${identifier_value}
# Returns a list of "cl_group__id" assocated with that identifier
- var:
    identifier_name: String
    identifier_value: String
  request_path: /cold/crosswalk/group/${identifier_name}/${identifier_value}
  api_content_method: GET
  api_url: http://localhost:3000/rpc/group_crosswalk?identifier=${identifier_name}&value=${identifier_value}
#
# Vocabularies
# ------------
#
# **cold** also supports end points for stable vocabularies mapping an 
# indentifier to a normalized name. These are set at compile time because
# they are so slow changing. 
#
# /cold/subject
# : Returns a list of all the subject ids (codes)
- request_path: /cold/subject
  request_method: GET
  api_method: GET
# subjects is implemented as an SQL view returning all subject ids
  api_url: http://localhost:3000/subjects
# 
# /cold/subject/${subject_id}
# : Returns the normalized text string for that subject id
- var:
    subject_id: String
  request_path: /cold/subject/${subject_id}
  request_method: GET
  api_method: GET
# get_subject is implemented as an SQL function on cl_subject model
  api_url: http://localhost:3000/rpc/get_subject?subject_id=${subject_id}
#
# /cold/issn
# : Returns a list of issn that are mapped to a publisher name
- request_path: /cold/issn
  request_method: GET
  api_method: GET
  api_url: http://localhost:3000/publishers
#
# /cold/issn/${issn}
#: Returns the normalized publisher name for that ISSN
- var:
    issn: ISSN
  request_path: /cold/issn/${issn}
  request_method: GET
  api_method: GET
# get_publisher is implemented as a SQL function on cl_publisher model
  api_url: http://localhost:3000/rpc/get_publisher?issn=${issn}
#
# /cold/doi-prefix
# : Returns a list of DOI prefixes that map to a normalize name
- request_path: /cold/doi-prefix
  request_method: GET
  api_method: GET
# doi-prefixes is implemented as a SQL view on cl_doi_prefix model
  api_url: http://localhost:3000/doi-prefixes
#
# /cold/doi-prefix/${doi_prefix}
# : Returns the normalized publisher name for that DOI prefix
- var:
    doi_prefix: String
  request_path: /cold/doi-prefix/${doi_prefix}
  request_method: GET
  api_method: GET
# get_doi_prefix is implemented as a SQL function on cl_doi_prefix model
  api_url: http://localhost:3000/rpc/get_doi_prefix?doi_prefix=${doi_prefix}

